 In the last lecture we have understood what is an algorithm. Now in this lecture we will understand the difference between an algorithm and a program. This difference is important for us to understand because most of the beginners do not have a complete idea about what is an algorithm and what is a program and why one must write an algorithm before writing a program. We will try to understand all these in this lecture. So let's get started with this lecture and let's see the topics. The topics of this lecture are introduction to algorithm versus program. Algorithm versus program we will understand the difference between the two and then finally we will see the summary of this lecture. Let's dive into the introduction to the algorithm versus program first. So what is an algorithm? We have understood in the last lecture that an algorithm is a step-by-step procedure to solve a specific problem. Through an algorithm we can solve a specific problem. In the last lecture we have seen this how to find a contact in a contact list. We have written an algorithm for the same. So an algorithm is a step-by-step process to solve a specific problem. On the other hand a program is also a step-by-step procedure to solve a specific problem. It seems like both are same but they are different in reality. So what's the difference between the two? There are differences between algorithm and program and this is what we now need to understand. So let's dive into algorithm versus program. We will now understand what is the difference between an algorithm and a program. We will understand this by considering several points related to them. So let's see point number one. An algorithm is an abstract concept whereas a program is a concrete implementation of the algorithm. An algorithm is simply an abstract concept. This means that it is just an idea. It is non-implementable. We cannot implement an algorithm in a computer. We cannot provide an algorithm to a computer and expect it to produce an output. Algorithm is simply an abstract concept. It is an idea that we may write on a piece of paper for us to understand. Whereas a program is a concrete implementation of the algorithm. This means that program is implementable. So it is the implementable form of the algorithm that we write for a computer to execute. So this is the difference between an algorithm and a program. Now let's write an algorithm and let's write an equivalent program to understand this difference properly. Let's write an algorithm to calculate the factorial of a number n. The step number one is to simply start the algorithm. Step number two is to initialize a variable result to one. Initially result variable will hold value one but later it will hold the result of the factorial of n. As we now need to calculate the factorial of n, we need to take the input n from the user. We need to read that first. So let's read the input number n from the user. After receiving the value of n, we now need to calculate the factorial of n. And we can calculate the factorial of n by repeating the following steps until n becomes zero. So what are those steps? We first need to multiply result by n and store the result in the result variable. After this we need to decrement n by one. So these are the two steps we need to repeat until n becomes zero. Eventually we will get the final result of factorial of n in the result variable. How this works? We know already how to calculate factorial of n. factorial of n is equal to n into n minus 1 into n minus 2 and so on up to 1. This is exactly what we are doing here. We are repeating these steps until n becomes zero. The first step is to multiply result by n. We know initially result is 1. So 1 is multiplied by n. We will get n in the result variable. After this n is decremented by 1. This means that now we will get n minus 1. Next time we multiply the result by n minus 1. This means we now multiply n by n minus 1 because result variable was holding value of n. So n is multiplied by n minus 1 and then again n is decremented by 1. This time we will get n minus 2. So now when we perform this step we will get n into n minus 1 into n minus 2 in the result variable. After this again n is decremented by 1. This time we will get n minus 3. In this way the process will continue until n becomes zero. This means the last value which is multiplied by the result variable is 1. Eventually we will get the factorial of n from these steps. After this we can print the value of result as the factorial and then we can stop the algorithm. So these are the steps which we can follow to calculate the factorial of a number. But these steps are not implementable. We cannot run these steps on a computer. Computer cannot understand these plain English sentences. It is for us to understand. We write an algorithm to understand the steps that we need to follow in order to solve a specific problem. In this case we are solving the problem to calculate the factorial of a number. Now let's write the algorithm for the same so that we can implement it on our computer. So here is the program. This program allows us to calculate the factorial of a number n. This program is written in a programming language called the C programming language. If you are not familiar with C programming language don't worry about this. The purpose of writing this program here is to understand the difference between an algorithm and a program and how we can convert an algorithm to its equivalent program. Here I have written this function fact. The job of this function is to receive some input n and produce some output and that to an integer output. That's why we have int here. Now within this function we have these steps. First we have initialized a result to 1. That is according to the algorithm. After this we have this while loop. This means we want to repeat something. What we want to repeat is we want to repeat these two steps. This means we want to multiply the result by n and store the result in the result variable. This is equivalent to this step. Multiply result by n and store result in the result variable. After this we need to decrement n by 1. This n minus minus is equivalent to n equal to n minus 1. So we are decrement n by 1 and we are storing the result in variable n itself. This is equivalent to this step. Decrement n by 1. And we will repeat these two steps until n becomes 0. If n is greater than 0 then there is no problem. But if n becomes 0 then we will go outside of this while loop and implement this line. Instead of printing the result we are returning the result. Because a function has the capability to produce some output. Here we are returning the result. This means we are returning the output back to the caller who called this function. Don't worry about these terms. Just understand this that this function has the capability to calculate the factorial of a number. We have written a program which is equivalent to this algorithm. And now we know the difference between an algorithm and a program. An algorithm is just an abstract concept. On the other hand a program is implementable. So with this we are done with point number 1. Let's move to point number 2. An algorithm can be written in any language while a program must be written using a programming language only. So we can write an algorithm in the language of our choice. We can write an algorithm in plain English sentences. Before we can write an algorithm in our local language it does not matter. As soon as it makes sense to us it does not matter. While a program must be written using the programming language only. We are allowed to write a program in a programming language. We need to follow the proper syntax of that language. Just like in C programming language we need to follow the syntax of that language. Similar thing we need to do. When we write a program we must always follow the syntax and semantics of the programming language. As an example the algorithm that we have written for calculating the factorial of n was written in English language and the program was written in C programming language. So we were not writing the program in some random language. This program is written using C programming language and C programming language has its own syntax and semantics which we need to follow. Like before writing the name of the function we must mention the return type. That means the type of data that is returned from this function which is equivalent to the type of output that is returned from the function. And after writing the name of the function we must put parentheses. So this is according to the language that we need to follow. So we are done with point number two also. Now let's move to point number three. And algorithm is developed during the design phase and a program is developed during the development phase. Now what do we mean by this? In order to understand the statement properly we now need to understand what is software development lifecycle. This is how the software development lifecycle looks like. A software in its development process has to grow through several phases. These are all the phases a software has to go through. First the requirement analysis is done. Then the designing is done. Then the development is done. Then testing and then maintenance. First the requirement analysis is done which means that the requirement is gathered from the client. After this designing is done in the design phase and algorithm is written. Hopefully the steps are written in the language of our choice. Later the development phase comes. After writing the algorithm the algorithm is converted to the actual program. This is done in the development phase. After this the testing phase comes and then the maintenance phase comes. This is the cycle that is followed during the software development process. That is why it is called software development lifecycle. In the design phase algorithm is developed and in the development phase the actual program is developed. So we have understood that an algorithm is developed during the design phase and a program is developed during the development phase which means we are done with point number 3. Now let's move to point number 4. An algorithm does not depend on the hardware and operating system while a program depends upon them. An algorithm does not depend upon the underlying hardware and operating system because an algorithm is non-implementable. It is not written for a computer. It is written for us to understand. So it does not depend upon the hardware and the operating system of the computer. On the other hand a program depends upon them because a program is an implementable procedure. It is written to be executed by a computer. Therefore it depends upon the hardware where it is running. For example maybe a program requires 8GB of RAM and your computer might have 4GB of RAM. Then maybe it is possible that your program may not produce the output that you intend it to produce. Or maybe it is possible that the program you have written may run on Windows machine only. Then that case if you try to run that program on a Mac system you won't be able to do it. So a program always depends upon the hardware and the operating system. Let's move to point number 5 now. An algorithm is always analyzed while a program is tested. Remember this that algorithm is analyzed which means that we check an algorithm for its efficiency and performance. Efficiency is checked by considering the time complexity, the space complexity and other matrix. We will understand how to analyze an algorithm in this course. The name of this course is design and analysis of algorithms. We will learn how to write algorithms and how to analyze them. Analyse is a very important phase. Without analyzing an algorithm we may not proceed to write the program for the same. We first analyze an algorithm to check its performance. And this is done in a general sense. This means that it does not depend on a specific computer. On the other hand a program is always tested. We run a program. We check that program for specific inputs and then we will see what are the outputs we are getting. Whether the outputs we are getting are the expected ones or they are different. We check those things and this is called testing. So a program is always tested and it depends upon a computer we are running on. While an algorithm does not depend upon the computer, we simply analyze an algorithm. This means we check its performance and its efficiency in general sense. So with this we are done with all the five points and I hope it is clear what is the difference between an algorithm and a program. Now let's move to the summary of this lecture. So here is the summary of this lecture. An algorithm is an abstract concept. On the other hand a program is a concrete implementation. An algorithm can be written in any language. On the other hand a program must be written using a programming language. An algorithm is always developed during the design phase. On the other hand a program is developed during the development phase. An algorithm is independent of the hardware and operating system. On the other hand a program depends upon the hardware and the operating system. An algorithm is always analyzed. On the other hand program is always tested. So these are the differences between an algorithm and a program. Now we are done with the summary of this lecture and this means that we are done with this entire lecture. Okay friends, this is it for now. Thank you for watching this presentation. I will see you in the next one.