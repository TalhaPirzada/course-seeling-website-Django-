 In the last lecture we saw part one of indentation in python where we have discussed what is indentation, the working of indentation and the rules of indentation. Now we will discuss some more topics on indentation in python. Let's see all those topics one by one. The first topic is common indentation errors and the second topic is advantages and disadvantages of indentation. Let's discuss these two topics one by one. First we will discuss common indentation errors. There are many errors that we make in programming. In this presentation I would like to discuss some common indentation errors. The first possible error or the mistake that we can make while writing the code is as follows. Let's say we have this piece of code. If name is equal to sam then print hello sam and print how are you? We want to execute these two statements once this condition is satisfied. Is this the correct way of writing the code? No, this is not the correct way of writing the code. If we want these two statements hello sam and how are you to be printed when name is equal to sam then we need to indent these two print statements so that we make these two statements part of this if statement. This is what we have learned in the last lecture. This is not only a place and important role in improving the readability in Python but in Python it is used to represent a block of code. A block of code is a piece of code which is considered a part of some other piece of code. Here we want to make these two statements part of this if statement. Hence we need to indent these two statements and one thing you should always remember is after the if statement there must be at least one statement which needs to be indented. Then only it would be considered a valid code. This is not the valid code. These two statements are not part of this if statement. Hence we can say this is not the correct way of writing this code. The correct way is this piece of code where we are indenting these two statements to represent these two statements as part of this if statement. Here I am using four spaces to represent the indentation but it is totally up to you. You can use a single space to represent an indentation also. We have learned this in the last lecture while discussing the rules. A single space can be used to represent an indentation. We can use two spaces, three spaces, number of spaces does not matter. Indentation matters. We need to indent a statement or a set of statements to represent them as a block of code. Now we know what is the wrong way of writing the code and what is the right way of writing. If we want these two statements to be part of this if statement we need to indent them. So this was the error number one. Now let's discuss the error number two. Let's say we have this piece of code. We just have one line print how are you? We want to print how are you on the screen and there is one space added before this print statement which means that we are indenting this print statement. Is this the correct way of writing the code? No, this is not the correct way because this is the only line in this code and this is the first line of this code. We have learned this in the last lecture that the first line of the code must not be indented. Indentation plays a role in representing a block of code which is considered part of some other code. This print statement is not part of any other piece of code. Hence we should not indent this statement. The correct way of writing this code is this. We should not add a space before this print statement because this is the only statement in this code. So discussing error number two, let's discuss error number three. Let's say we have this piece of code where we are checking if name is equal to Sam then print hello Sam and also print how are you? This means that we want these two statements to be part of this if statement. This is what I'm trying to do here. You can observe this that these two statements are indented which means that these two statements must be part of this if statement. Now my question is, is this the correct way of writing the code? No, this is not the correct way of writing the code. The reason is that we are not maintaining the uniformity while putting the indentations. In the last lecture we have discussed rule number four where we have said that the spaces must be uniform while representing the indentation. Here we want to indent these two statements so as to make them part of this if statement. The problem here is that we are not adding uniform spaces before these print statements. This is not the correct way of writing the code. The correct way should be this. Either we can represent one space for the indentation or four spaces for the indentation. Here we are using one space to represent indentation for this print statement and we are using four spaces here to represent the indentation for this print statement. There is no uniformity here but if you compare this code with this piece of code, in this piece of code we are maintaining the uniformity. There are four spaces added before these two statements. Hence this piece of code is the correct code. You can also use one space to represent the indentation that is also fine. But one thing you should always remember is that you must maintain the uniformity throughout. If you are using one space to represent the indentation then try to use one space. If you are using four spaces to represent the indentation then use four spaces throughout the program. So this was the error number three. Now let's discuss error number four. Here we have this piece of code where we are checking if name is equal to SAM then print hello SAM. What I want to do here I want to print hello SAM when the condition is satisfied and I don't want this print statement to be part of this if statement. But here I have indented this print statement. Is this the correct way of writing the code? No this is not the correct way of writing the code because this print statement is indented which is correct. We are indenting this statement so as to make it part of this if statement which is correct. But we should not indent this statement because we don't want this statement to be part of this if statement. Also if we want to indent this statement then we should add four spaces to represent the indentation as we have learned this already that the indentation must be uniform. Here we are writing just one space while here we are writing four spaces but this is not the intention of this code. We don't want this print statement to be part of this if statement. Hence we should not indent this statement. So the correct code is if name equal to SAM then print hello SAM it makes sense this statement is part of this if statement and this statement print how are you is not part of this if statement. So this is the correct way of writing the code. This is what we want at the end. So you have seen all the different types of errors which we can make while writing the code. After discussing common indentation errors now we are ready to discuss the advantages and disadvantages of indentation. There are several advantages and disadvantages of indentation. Let's discuss the advantages of indentation first. The first advantage of indentation is better readability and identification of the block of code. I told you already that indentation in python plays a very important role. It is not only used to improve the readability but it is also used to represent a block of code. So the major advantage of using indentation is we can represent a block of code through indentation. Not only we can improve readability but we can also represent a block of code with indentation. The second advantage is it reduces lines of code. Note out that in other programming languages like C, C++, Java we use to represent a block of code through curly braces. But in python instead we use indentation to represent a block of code which definitely reduces lines of code as we are not using curly braces to represent a block of code. So these are the advantages of indentation. Let's discuss some disadvantages as well. The first disadvantage is code must be carefully indented especially in the large programs. It is important that the indentation must be uniform throughout and in large programs we need to be very careful with this. Although with code editors like visual studio code we don't have to worry much about indentation. You will see this when we will write code in visual studio code. The code must be carefully indented in large programs. If we won't maintain the uniformity throughout then it would become difficult to read the code as well as it will not be considered a valid code. So we need to maintain the uniformity throughout and we need to be careful about the indentations we should avoid all the errors which we have seen throughout in this lecture. The second disadvantage is indentation can become tedious without using good code editors. I have already mentioned that if we won't use code editors like visual studio code then indentation can become a tedious task. If we instead use notepad to write our code let's say then it would be difficult to maintain uniformity throughout and the indentation task becomes more tedious. This we should avoid using notepad where we do not have any facility to add automatic indentation instead we should use code editors like visual studio code to automatically add indentation in our code. So now we know all the advantages and disadvantages of indentation. This means that we are done with this lecture. We have discussed common indentation errors and we have also discussed the advantages and disadvantages of indentation. Ok friends this is it for now. Thank you for watching this presentation. I'll see you in the next one.