 In the last presentation we saw what is a compiler. Now we are ready to understand what is an interpreter. So without any further delay, let's get started and let's see all the topics of this presentation one by one. There is only one topic we need to cover in this presentation and that is what is an interpreter. Before understanding what is an interpreter, we need to recall what is a compiler. A compiler is a complex piece of software whose job is to convert source code to machine code in one code. So compiler takes the source code and converts it to machine code or binary code in one code. We have learned this statement already in the last presentation and we have understood it with the help of an example. Recall that we have assumed that this is my machine and this is my friend's machine. In my machine I have written this code in C programming language and I have provided this code to compiler. Compiler in return has generated an executable which we can run on any machine because this is a machine understandable code. I can provide this code to my friend and my friend is able to run this code. Eventually he will see this output 30. This is what we have seen in the last presentation. We know that how compiler works. Compiler translates the source code to machine code in one code. Now we are ready to understand what is an interpreter and how interpreter translates source code to machine code. An interpreter is a software program written to translate source code to machine code but it does that line by line. So interpreter translates source code to machine code line by line not in one code. Let's try to understand the meaning of this statement with the help of an example. Let's say this is my machine and this is my friend's machine. In my machine I have written this code. This code is a JavaScript code and I have chosen JavaScript programming language because JavaScript is an interpreted programming language. Here we have three variables x, y and z. We have this statement x equal to 5, y equal to 10, z equal to x plus y. We know that x is 5 and y is 10. Therefore eventually this will get replaced by 5 plus 10 which gives us 15. So 15 will get stored in variable z. After this we have the statement document dot get element by id, parrot dot inner html. Document dot get element by id allows us to get an element from the html document by its id. Now id of that element must be parrot. Let us assume there is already an html document available with us and in that html document we have an element called paragraph element or p element with id parrot. So we can access that element in this JavaScript code with the help of this line. Document dot get element by id allows us to get an element from the html document by its id. In this case the id of that element is parrot. After this we have this dot inner html which allows us to make changes to that element. And here I want to provide this string or this text to that element. The value of z is plus z plus dot. Here plus signs are used to concatenate the strings. So eventually we will get this entire string that is the value of z is 15 dot. string strings means combining strings. So the final result will be the value of z is 15 dot. So eventually that element will receive this string. Now let us say I want to run this code and I don't want to run this on my machine but on my friend's machine. In order to do this I need to provide the copy of this code to my friend and my friend must have an interpreter installed on his machine in order to run this code. So interpreter must be installed on my friend's machine. It is not necessary that interpreter must be installed on my machine. I am providing the copy of my code the source code to my friend and my friend must have an interpreter installed in order to run this code. Here we will take each line of this code and convert it to machine code on the fly. On the fly means at runtime. So interpreter translates this code line by line on the fly and generates an output the value of z is 15. So my friend would be able to see this output. Of course he must have an HTML document as well which consists of a paragraph element. And only he would be able to see this output. One thing you need to note is that interpreter translates this code line by line and that too at the time when we run the code and it generates this output on the screen. Second thing is that interpreter must be installed on my friend's machine. It is not necessary that interpreter must be installed on my machine. I will simply provide the copy of the source code to my friend and my friend must execute this code through interpreter. This is not the case with compiler. I need to compile the code from my side and generate an executable. I can provide the executable to anyone. So eventually my friend just needs to run the executable. Note that interpreter never generates an executable. It translates each line of this code on the fly. We will never get an executable in response. This is very important point. Compiler generates an executable but interpreter never generates an executable. The job of interpreter is to translate each line of code at the time when we run the code and generate the output on the screen. It will never generate an executable. One such example of an interpreter is our browser. We have Chrome, Firefox, these type of browsers. Whenever we ask a web page from a web server, let's say we ask to load google.com, in that case Google servers will return HTML, CSS and JavaScript to our browser along with some other files. The browser is capable of understanding those files and in response it generates a web page. So browser understands or interprets the code that is HTML, CSS and JavaScript and in response it generates the output which is the web page. So this is how interpreter works and now we know what is the difference between an interpreter and a compiler. interpreter translates the source code to machine code in one go. On the other hand interpreter translates source code to machine code line by line. But note that interpreter never generates an executable. This means every time whenever we want to run the code we need to provide it to the interpreter. It is not the case with compiler. We need to provide the code once to the compiler. interpreter in return generates the executable and every time whenever we want to run the code we need to run the executable only. There is no need to compile the code again and again. So now we know the difference between an interpreter and compiler and this means we are done with this presentation. Okay friends, this is it for now. Thank you for watching this presentation.