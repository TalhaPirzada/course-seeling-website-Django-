 In the last lecture we saw the introduction to python programming. Now we are ready to understand the definition of python. So without any further delay, let's get started and let's see all the topics of this presentation one by one. There is only one topic we need to cover in this presentation and that is python definition. Now we will try to understand the definition of python. Python is an interpreted general purpose or multipurpose high level programming language with easy syntax and dynamic semantics. Now what does it mean? Before understanding the meaning of this definition, I would like to tell you who is the creator of python. python is created by hyudowen rossum during the period of 1985 to 1990. He named this language python because he is a big fan of a British comedy series called Monty python's flying circus. So he got this name python from this series and not from a snake. After knowing this fact, let's get back to our definition. python is an interpreted general purpose or multipurpose high level programming language with easy syntax and dynamic semantics. In order to understand the meaning of this definition, we need to understand the meaning of each and every word written in this definition. Let's first try to understand the meaning of this word that is interpreted. What is the meaning of the word interpreted and what does it mean? python is an interpreted programming language. There are two types of programming languages. One is called interpreted programming language and the other one is called compiled programming language. An interpreted programming language is a language which uses interpreter for its translation Compiled programming language is a language which uses compiler for its translation. Compiler and interpreter are translators. They are used to translate the code written in one programming language to the code written in another programming language. This is what we need to understand. Python is an interpreted programming language and this means that Python uses interpreter for its translation. Now you might have this question in mind. Why Python or any other language needs translation? Languages like Python, C, C++, Java, these languages need translation because we humans can understand these languages very well but unfortunately computers are not capable of understanding these languages. And this is the reason why translation is needed. We need to translate the code which we can understand to the code which machines can understand. So you can think of a translator as a device or a machine which takes source code or the code which we humans can understand as input and in response it generates machine code as output. Machine code is the code which machines or computers can understand. So this is the reason why translation is needed. So Python is an interpreted programming language which means that Python uses interpreter as a translator to translate its code in machine code. So now as you have understood the meaning of interpreted let's try to understand the meaning of general purpose or multi purpose. Python is a general purpose programming language because it isn't specialized to a specific domain as simple as that. Now what does this statement mean? It means that Python is not meant for a specific domain instead we can use Python in multiple domains. For example we can use Python in web development. We can create web applications using Python. Not only that we can use Python in robotics to create intelligence for robots. Other than this we can use Python in artificial intelligence to create artificial intelligence applications. There are a lot of other applications as well. We can use Python to create mobile applications. We can use Python to create desktop applications and there are so many applications of Python. This is the reason why Python is called a general purpose or multi purpose programming language. And it is not called a special purpose programming language. I hope now it is clear to you what is the meaning of general purpose. Now let's try to understand the meaning of high level programming language. Python is a high level programming language and this means that we humans can understand this language without any problem. On the other hand a low level programming language is a language which only machines can understand well. By the way machines can understand the language of zeros and once and we humans are not capable of understanding that language. Let me give you one example. This code is written in Python. This is a high level programming language code. Here length is equal to 50. Breadth is equal to 20. Area is equal to length into bread. And here we are trying to print area on the screen which means that we want to print the area of rectangle as area is equal to length into bread. This is a high level code we humans can understand this piece of code. On the other hand this code is not well understood by us but machines can understand this code very well. This is a low level code. You can clearly see the difference between a high level and a low level code. And now I hope it is clear to you what is the meaning of high level programming language. Up to now we have discussed what is the meaning of interpreted, general purpose and high level. Now we are ready to understand the meaning of easy syntax. Python has a very easy syntax if we compare it with any other programming language like C, C++, Java etc. In order to understand this in a better way I would like to give one example from C programming language and one from Python. I will take the equivalent Python code to better demonstrate why Python has an easy syntax. Let us consider one example code from C. Here we have a C code available. We have X equal to 10. X is a variable of type integer. This means X is capable of holding an integer value. A variable is something which is capable of holding some value in it. You can think of a variable as a container which can hold some value. X is a variable of type integer. This means that this variable can hold an integer value. Then we have a variable Y of type integer and it is also holding an integer value. It is holding value 5. Then we have a printf function to print something on the screen. Here this printf function will print the value of X plus Y. We know that X is 10 and Y is 5. Therefore 10 plus 5 or 15 will get printed on the screen. Percentage D is the place holder for the value which we want to print. In this case we want to print 15 on the screen. That is why this percentage D is the place holder for the value 15. Here D stands for decimal. Don't worry if you don't know C programming language. There is no need to understand C programming language to understand this code in front of you. This code is written for comparison purposes. Now we will consider this equivalent Python code. Here we have X equal to 10, Y equal to 5. Then we have a print function to print the value of X plus Y on the screen. We know that X is 10 and Y is 5. Therefore 10 plus 5 or 15 will get printed on the screen. You can observe this that this code is very easy to understand. This code has very easy syntax. Why is that the case? There is no need to specify the type of a variable in this code. In Python there is no need to specify the type of a variable. Also there is no need to add semicolon after every statement. Not only this, there is no need to add place holder in the function. Also name print is much clearer if we compare it with the name print F. So it is clear that Python is easy to understand language because it has very easy syntax. Now as you have understood the meaning of easy syntax, let's try to understand the meaning of dynamic semantics. What is the meaning of dynamic semantics? Dynamic semantics mean that variables are dynamic objects in Python. Now what does this statement mean? In order to understand the meaning of this statement, we need to consider the same example which we have seen just now. Again we have the same C code and you might have observed this that whenever we create variables in C, we need to specify its type. Here x is of type integer and y is also of type integer. This is called static typing and this is the reason why C programming language is called statically typed language. And this also means that the variables will remain integer variables throughout the lifetime of this program. x is of type integer. This means that x can hold only integer values and it cannot hold any other value. So if we try to assign let's say 10.78 to x, then only 10 will get stored and not 10.78. 0.78 will get truncated. This is a floating point value. 0.78 will get truncated and only 10 will get stored inside variable x. This is what we need to understand. x is of type integer and it can only hold integer values. Similarly, y is of type integer. It can also hold an integer value only. If we try to assign a floating point value to these variables, then only integers will get stored and the rest of the part will get truncated. Now let's consider the equivalent python code. We know that x has no type and y also has no type. In python, there is no need to specify the type of a variable. This is the reason why python is called dynamically typed language. And this is the reason why variables are called dynamic objects. This also means that we can assign any type of value to these variables. Right now x is holding an integer value. But it does not mean that this variable can only hold integer values. Later in our code, we can assign a floating point value to this variable. It is completely fine. So in python, variables are dynamic objects. And this is the meaning of dynamic semantics. Python has dynamic semantics because variables are dynamic objects. Now I hope the concept of dynamic semantics is clear to you. And I hope this complete definition is also clear to you. Python is an interpreted, general purpose or multipurpose, high level programming language with easy syntax and dynamic semantics. And this also means that we are done with this lecture. Okay friends, this is it for now. Thank you for watching this presentation. I'll see you in the next one.