 In the last presentations we saw what is a compiler and what is an interpreter. Now we are ready to understand the differences between compiled and interpreted languages. So without any further delay, let's get started and let's see all the topics of this presentation one by one. There are only three topics we need to cover in this presentation. The first topic is pros and cons of compiled and interpreted languages. The second topic is hybrid approach and the third topic is examples of compiled, interpreted and hybrid languages. We'll discuss all these topics one by one. First we will discuss what are the pros and cons of compiled and interpreted languages. This means we will discuss the advantages and disadvantages of compiled and interpreted languages. We'll first discuss the pros of compiled languages or advantages of compiled languages. The first advantage is private code. As we know that compiled languages are always compiled. This means that the code written in a compiled language must be provided to a compiler and then we will get an executable. Now if someone wants to run our code, we just need to provide that executable. There is no need to provide the source code to that person. This means your code is private. You are providing the executable and not the source code to someone. The second advantage is faster execution. As we know we just need to compile our code once and we can run the executable multiple times. And we know that executable is written in machine code which means that it's obviously faster. Hence, the execution is always faster. The third advantage is fully optimized. The executable that we will get is always optimized according to our CPU. Therefore, we don't have to worry about any performance issues. These are all the pros of compiled languages. Now we are ready to discuss the cons of compiled languages or the disadvantages of compiled languages. The first disadvantage is no portability. We know that the compiled language is not portable. As whenever we generate an executable after compilation, that executable is capable of running on a specific type of machine. So let's say if I compile my code on Windows machine, then I will get an executable capable of running on Windows machine only. This is the reason that compiled languages provides no portability. As whenever we get an executable, that executable is capable of running on one type of machine only. So, an executable which is capable of running on Windows machine is not capable of running on Mac machine or Linux machine. This is what we need to know. Portability means that the code is capable of running on multiple machines. But here there is no portability. The second disadvantage is extra compilation step. As whenever we make changes to our code, we need to compile it and then run it. There is always a compilation step. Obviously in the case when we make changes to our code. These are all the cons of compiled languages. Now we are ready to discuss the pros of interpreted languages. Or we are ready to discuss the advantages of interpreted languages. The first advantage is portable. Definitely interpreted languages are portable because every time we are providing source code, we are not providing the executable. This is the reason why interpreted languages are portable. You are providing source code to your friend. Your friend must have an interpreter installed on his machine to run that code. We know that source code is portable. It can run on any machine which has an interpreter installed. Hence we can say interpreted languages are portable. The second advantage is easy debugging. Debugging means error checking. So debugging is easier in case of interpreted languages because we know that interpreter translates code line by line. Whenever there is something wrong in the line, your interpreter always generates error immediately. Not after the complete interpretation of the code. So it will not wait until the code is completely interpreted. It will generate error immediately. This is the reason why debugging is quite easy. We will get an error immediately whenever there is something wrong in the line. Now after discussing all the pros of interpreted languages, we are now ready to discuss all the cons of interpreted languages. The first disadvantage of interpreted languages is that interpreted language needs interpreter. So whenever we want to run the code written in interpreted language, we need to provide it to the interpreter. This is not the case with compiled languages. We just need to compile once and we will get an executable. That executable we can run multiple times. It's not the case when we consider interpreted languages. The code written in an interpreted language must be provided to an interpreter in order to run it. The second disadvantage is it is slower. Because every time we are providing code to the interpreter, this means the translation happens every time. It is slower. It is not the case that you will get an executable from interpreter which you can run multiple times which is faster to execute. No. Every time whenever we want to run our code, we need to provide it to the interpreter, hence it is very slow. The third disadvantage is public code. Interpreter languages are public. As you need to provide source code, this means that your code is public. You are not providing the executable. You are providing the source code to someone. So in order to run the code, you need to provide the source code and this is the reason why our source code is public code. Now we know all the pros and cons of compiled and interpreted languages. We are ready to dive into our second topic that is hybrid approach. This approach is different from compiled and interpreted approach. It combines both the words. Hybrid approach involves the best of both the words that is compiler and interpreter. So it takes advantages from both. It is the combination of both compiler and interpreter. And this means that it provides code privacy from compilation and portability from interpretation. In order to understand this statement, we need to consider the following diagram. Let's say that the source code is provided to the compiler. In hybrid approach, what we will get from compiler is not the executable. We will get the byte code, which is also known as intermediate code. Now we can provide this intermediate code to any machine which has an interpreter installed on it. This means that if we want to run the byte code, then interpreter must be installed on a specific machine in order to run it. This is important. So byte code can be provided to an interpreter and that interpreter is capable of running that byte code and generating the machine code on the fly. This means we are getting the best of both the words. We are getting code privacy from compilation. As we are generating byte code, we can provide this byte code to any machine. There is no need to provide the source code. Hence our code is private. And we are also getting portability from interpretation because we know that interpreters are installed on each machine. So there is no worry that byte code is capable of running on a specific machine only. We can run this byte code on any machine. The only thing that we need to take care is that the interpreter must be installed on a machine where we want to run this byte code. So we are getting portability from interpretation as well. Note that source code is provided to the compiler and compiler has generated byte code and not the executable. This is an intermediate code and it is generated because we want code privacy from compilation. This is not an executable which is capable of running on one type of machine. We can provide this byte code to any interpreter. It can be a Windows interpreter. It can be a Linux interpreter. It can be a Mac interpreter. We can provide this byte code to any interpreter and that interpreter is capable of running this byte code and generating the machine code on the fly. In this way we are also getting portability because we can provide byte code to any machine. There is no need to worry whether our byte code is portable or not. This is known as hybrid approach. Now as we know what is the hybrid approach, let's see some examples of compiled, interpreted and hybrid languages. There are many examples of compiled, interpreted and hybrid languages. I will now give you some of the examples. The examples of compiled languages are C, C++ etc. These are compiled languages. Interpreted languages are JavaScript, PHP. These are interpreted languages and hybrid languages are Java, C-shop, Kotlin etc. So these are all compiled, interpreted and hybrid languages. Now you might be wondering this course is all about Python. Is Python a compiled, interpreted or hybrid language? We will understand this in the next presentation. Although I told you already that Python is an interpreted language but this is not the complete truth. You will get to know the complete truth in the next presentation. This means that we are done with all the topics. We have discussed what are the pros and cons of compiled and interpreted languages. We have also discussed what is a hybrid approach and we have seen some examples of compiled, interpreted and hybrid languages. Okay friends, this is it for now. Thank you for watching this presentation.