 In the last presentation we saw the definition of python programming. Now we are ready to understand what is a compiler. So without any further delay, let's get started and let's see all the topics of this presentation one by one. There are only two topics we need to cover in this presentation. The first topic is why do we need a translator and the second topic is what is a compiler. We will first try to understand why do we need a translator. A translator is needed and there is a strong reason behind this. Generally a computer program is written using a high level programming language. A high level programming language is a language which we humans can understand better. On the other hand a low level programming language is a language which machines can understand better. We only know the high level programming language very well. Like C, C++, Java, Python, these are all high level programming languages. The problem is that only humans are capable to understand these languages and machines cannot understand these languages. This is the reason why we need a translator. Humans can only understand the language of zeros and ones. They cannot understand high level programming languages. You can understand that there is a communication gap between humans and machines. Humans are capable of understanding high level programming languages. On the other hand machines are capable of understanding low level language or binary language. So this is the reason why we need a translator. A translator is a piece of software which converts a high level language code to the binary language code which machines can understand. So the job of translator is to convert a high level language code to the binary language code which machines eventually can understand better. So we want our machines to understand the language, the things that we want them to convey. This is the reason we need a translator. As we know machines cannot understand high level language, we need a translator to convert the high level language code to the binary language code which machines eventually can understand. So now you know why do we need a translator. There is one more thing I would like to tell you. There are two types of translators. One is called compiler and the other one is called interpreter. In this presentation we will try to understand what is a compiler. In the next presentation we will understand what is an interpreter and we will try to understand the differences between the two. We will understand these two topics in detail. First in this presentation we will try to understand what is a compiler. Now let's see what is a compiler. A compiler is a complex piece of software whose job is to convert source code to machine understandable code or binary code in one go. So a compiler is a piece of software. This is first thing. Many people have this confusion that compiler is a hardware. No compiler is a software and that to a complex piece of software. It is very complex. It has lot of functionality but the good thing is that we don't have to understand each and every detail about compiler because understanding all those details is out of the scope of this course. A compiler is a complex piece of software whose job is to convert source code. That is code we humans can understand to machine understandable code or binary code. This means the code which machine can understand. So it converts source code to machine code in one go. Now this is also important to understand and in order to understand the meaning of this entire definition I would like to give you one example to help demonstrate how compiler works. Let's say that this is my machine and this is my friends machine. In my machine I have written this code which is a C programming code hash include stdio.h int main int sum a equal to 10 b equal to 20 sum equal to a plus b and then I have a printf function which is used to print sum on the screen. Now here I am trying to calculate the sum of a and b. We know that a is 10 and b is 20 therefore the sum must be 30 because 10 plus 20 is 30. So eventually I want to print sum on the screen which means I want to print 30 on the screen. So with the help of this program we will get the output 30. Now you might be wondering this course is all about python. So why I took a C programming code? The reason is pretty simple. C programming language is a compiled programming language. This means it uses compiler for its translation and as we are talking about compiler in this presentation we need to consider a compiled programming language and this is the reason why I took a C programming code. I hope now it is clear to you. So I have written this C programming code and what I want to do now I want to provide this code to compiler. This means I want to compile this code. Before running this code it is important to compile this code so that compiler will first translate this code to machine executable code. Eventually that executable code will run on machine and machine will perform the task. That is what we want. So let's provide this code to the compiler and let's see what compiler will produce. If we provide this code to compiler compiler in return will produce an executable code. This code is called an executable code because we can directly run this code on our machine. We need to understand this that this is called executable and if my machine is a Windows machine then my executable should have an extension dot E X E. Understand this thing. If I compile my code on Windows machine then the executable must be having an extension dot E X E. If let's say my machine is a Mac machine and if I compile this code on Mac machine then I will get an executable with dot APP extension. So extension matters because this code is capable of running on Windows machines only if the extension is dot E X E. If the extension is dot APP then the code is capable of running on Mac machine. So let's say that my machine is a Windows machine then in that case the executable must have a dot E X E extension and this code is capable of running on Windows machines only. Now let's say that my friends machine is also a Windows machine and what I'll do I'll provide this code to my friend and I'll ask him to execute this code. This means I want that my friend should run this code. Then after running this code we'll get this output that is 30. Note this that I have compiled the code in a different machine in my machine and we are running the code in a different machine. Compilation means that the code will get converted to executable and eventually we can provide this executable to any machine and any machine is capable of running this code. Now one thing that we need to remember is that if we compile the code on Windows machine then we will get an executable with dot E X E extension. So note this that this executable is capable of running on any Windows machine. I'm saying any Windows machine. My friend should have a Windows machine in order to run this code and I'm assuming this that my friend's machine is also a Windows machine so he can run this code. And after running the code he will get this output that is 30. I hope now it is clear to you. Now I would like to take you to the IDE or Integrated Development Environment where we will compile this code and we will see the executable. Precisely I will take you to the code blocks IDE where we will compile this C program. So let's move to the code blocks IDE. Now we are in code blocks IDE and you can observe the same C program and the file name is sum dot C. Now this file is available in C programs folder and I want to show that C programs folder to you. So let me take you to that C programs folder which is available in my desktop. Now we are in my desktop and here we have the C programs folder. Let's open this folder. In this folder we have the sum dot C file. We can always check the extension of this file by right clicking on this and then clicking on properties. You can observe this is C source file and the extension is dot C. This is the same file where we have our C program. Let's click on OK and let's get back to our IDE. You might have observed this already that in this C program I have added two lines, hash include konu dot h and get C h. Get C h function is needed and for this I need to include this header file konu dot h because get C h function is available in this header file only. Now this get C h function is needed to hold the screen of the executable. After compiling this code we will get an executable. We know this already. Now that executable will get stored in the same folder where the sum dot C is stored. That is we will get an executable in C programs folder. If we double click on that executable this means if we run that executable we would be able to see the screen of the executable only for few seconds and then it will go away. In order to hold the screen we need this get C h function. Get C h means get character. This function allows user to enter the character on the screen that is on the executable screen. So this function holds the screen until user enters a character. Now it could be any character. It could be enter also. So it depends upon the user. We will see in a moment that how we can run that executable and we will observe a blinking cursor which asks us to enter some character. So now let's compile this code and let's see whether the executable is available in the same folder or not. Let's click on this build. We need to click this build. Build means compile. So let's click on this build. Now the build is successful which means compilation is successful. There is no error as you can observe zero errors zero warnings. Now let's get back to the same folder. You can observe that there are two more files in this folder. This is sum dot exe file and this is sum dot o file. This file is an object file and we don't have to worry about this at this moment. What we need to consider at this moment is this sum dot exe file. This is our executable which we can run on any windows machine. You can check the extension of this file by right clicking on this and then clicking on properties. Here we can observe that this file has extension dot exe. Let's click on OK and now let's run this file by double clicking it. You can observe the output is 30 and there is one blinking cursor here. It is asking a character from us. Let's say I provided it a character h. Observe that the screen is closed. So after providing the character the executable will go away. So in this way we can run our executable and we can provide this executable to any windows machine. Now any windows machine is capable of running this executable. I can provide this executable to my friend as my friend has windows machine. So he can run this executable without the need of this dot c file. Now he will not compile this file. He will just use this executable and run this. After compilation we now know that we will always get an executable and that executable is capable of running on any windows machine. Remember that I have compiled this sum dot c file in my windows machine. This is the reason why I am getting a dot exe file and now this file is capable of running on any windows machine. So this is all we need to know. So up to now we have learned why do we need a translator and what is a compiler. In the next presentation we will see what is an interpreter. So this is it for now. Thank you for watching this presentation.