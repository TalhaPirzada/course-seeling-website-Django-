 Hello friends and welcome back. In this lecture we will talk about the Java program anatomy. So we will see how does a simple Java program look like. So here is our outline. We will talk about classes and objects briefly. We will also talk about methods, naming conventions, Java program structure and packages. So let's get started. First of all, what is a class? By definition, a class is a blueprint to create objects. So what is an object? Also by definition, an object is an instance of a class. So these are technical definitions. Let me give you an example to make everything clear. Suppose that we have a factory. And this factory produces cars. So in order to be able to produce a car, we should have some characteristics or properties for each car. So this factory contains the properties or characteristics of a car. For example, the color of the car, the model and other information. So in this case, the factory is the class. And each car will be an object. So a class is a blueprint to create objects. Right? It has the properties of each object and we can create objects from this class. Moreover, each object is an instance of a class. Because we are creating this object by using this class. Okay? So this is it actually. I hope everything is clear now. Now let's talk about the class structure. So how do we create a class inside the Java? It looks like this. We will use the class keyword. And then we will put a space. And after that, we will type the class name. And this name over here can be anything. We can give any name to our class. After that, we put a brace and we close it. And inside these braces, we will put the code of the class. So this over here is called a code block. Because it is a piece of code surrounded by braces. All right? So of course, in here, we're going to write Java code. But just for explanation, I wrote code block. Okay? Now as I said, this over here is a keyword. So it is related to the syntax of Java, to the grammar of Java. And actually, all you see over here is related to the syntax. Let me explain. Java knows that whenever we write the class keyword, we will leave a space. And then we will type the name of the class. And after that, we will put the braces and write our code. So this structure defines how we create a class in Java. So in other words, this is the grammar of how we create a class in Java. So this is syntax, okay? Perfect. Now let's have a look at methods. Of course, we will talk about methods later. But I just want to give you an idea. So a method is a group of instructions to do a specific task. So let me give you some examples. We can write a method to add two numbers. So we will write some code and this code adds two numbers together. Okay? Just that. And we will group this code inside a structure in Java. And this structure will be a method. So this method has a specific task which is to add two numbers. Another example. We can write a group of code to say hi to the person that is using our program. So this group of code will be a method and it has a specific task which is to say hi to the user. Another example. We can write a method to get the user's name. So we can ask the user for his name and then he will give it to us. So also we will group all the instructions together and this will be a method which has a specific task. Okay? So everything will be clear in the future whenever we try some examples. Now in Java we have a special method called main and we will talk about it in a little bit. For now let's see the method structure in Java. So how do we create a method in Java? What is the syntax or the grammar used in order to create a method in Java? Okay? First of all, each method consists of four main parts. Let me show you. First of all we have what's called the return type and then we will put a space, then we will put the name of the method and then we put some parentheses like this. Inside the parentheses we will put the parameters for this method. Parameters are some data that are given to the method and the method uses this data inside its code block. For example, suppose that we want to write a method to print the user name. So the parameter in this case will be the user name because it is the data that we want to give to this method. And inside the braces of this method we will write some Java code to print the user name. Okay? So this is it. And the code block in this case is called the body of the method and it is put inside braces as you can see. So now let's have a look at this note. Every method is written inside a class. Okay? So we cannot create a method without creating a class and of course this is inside the Java. So you can't think of a class as a container of methods. Okay? Now we will see how we can call a method. Now what is calling a method? It is basically using the method. For example, suppose that we want to use the method that prints the user name. So in order to use it we should call it. And now we will see how. We will put the method name followed by the parentheses and inside the parentheses we will give the method the parameters that it needs. And after that we will put a semicolon because calling a method is a statement in Java. So each statement ends with a semicolon. For example, suppose that the method that prints the user name is called print. So we will type print and then we will open parentheses and inside the parentheses we will type the name of the user. Okay? And after that the code block of this method will be executed. So the body of the method that we wrote using Java will be executed. So in this case the name that we gave as a parameter will be printed. Of course later on we are going to learn how we can print things using Java and everything. But now I'm just giving you an idea. Now let's have a look at this node. The main method is automatically called when we run our Java program. Okay? So the main method is a very important method that should exist in every Java program. And whenever we run the Java program this method is called or used automatically. So the main method is the first method that is called and it is the starting point of execution of our Java program. And we cannot have a Java program without a main method. Okay? So now you might have an idea that whenever we want to create a Java program we will write our code inside the main method. Because it is the first method that will be called. Okay? So all the code that we write inside the body of the main method will be executed whenever we run our Java program. Let's see what our access modifiers. Access modifiers are keywords that specify how to access classes and methods. And this is discussed later in OOP. So we have public keyword, private, protected and default. I just wanted to get an idea because as you see in a little bit these keywords are used in a simple Java program. And as I said these will be explained later in OOP. So for now just know that we have a public, private, protected and default keywords in Java. And these keywords are access modifiers. Now let's see some naming conventions. And these naming conventions are general in programming, not only in Java. And they specify how to write names in programming. All right? We have what's called the Pascal case convention. So suppose that we are typing a word in Java. And this word is something like this. It is this is a name. Okay? So using the Pascal case convention the first letter of each word will be a capital letter. So this we will capitalize that T is recapitalize i. And then we have a name. So the a is a capital A and the n is a capital N. Okay? So the first letter of each word is a capital letter. The first convention is used with the classes in Java. So we should name our classes using the Pascal case convention. All right? Also we have the camel case convention. It looks like this. The first letter of the first word is a small letter. And after that we will capitalize the first letter of each word. It is similar to the Pascal case convention. The only difference is that the first letter should be a small letter, not a capital letter. Now the camel case convention is used when naming variables and methods in Java. We will talk about variables later but what I want you to know is that we name methods according to the camel case convention in Java. Finally we have the snake case convention. And it looks like this. Basically we put an underscore between each word. All right? And of course we have other conventions but I just wanted to show you this. So now we have all the information we need in order to see how does a simple Java program looks like. So what is the structure of a Java program? First of all we have a class. So each Java program contains at least one class. So have a look over here. We have this access modifier. It is public, right? And after that we are creating a class called main and we are opening the braces of this class. So the code of this class will be written in this area over here. As we said before each Java program contains a main method. So we will write the main method inside this class over here. It will look like this. We have a public keyword and this is an access modifier. Then we have the static keyword. This is a non-access modifier and we will talk about it later in OOP. And then we are creating the main method. This over here is the return type. Then we put the name. And then we open parenthesis and inside we have the parameters. So this over here is some data that we can give to the main method to work with. And after that we are opening the braces of the main method. So the code that will be executed when we run our program will be written over here. Inside the body of the main method. So this is a simple Java program. And when we create our first program you will see that it looks exactly like this. Now notice that this class over here is named according to the Pascal case convention. The first letter is a capital letter. And have a look at this main method over here. It is named according to the camel case convention. The first letter is a small letter. And not that this main method should be called main. And it should be all in small letter. We cannot change the name of the main method. It must be exactly like this. As you will see later on. So congratulations you now know how a Java program looks like. And don't worry you will understand everything that is written over here in the coming videos. So now I want you to remember these points. First of all each Java program contains at least one class. Pascal case convention is used with the classes. And camel case convention is used with methods. A method exists inside a class. And the main method is the starting point of execution of our Java program. So now we will talk about packages in Java. A package is a container for classes. So imagine that this big box is our package. Inside our package we can have multiple classes. And as we know inside each class we can create multiple methods. So I know this is a lot of information but this is very important to know before we can move on. So this is it. Thanks for watching and I'll see you in the next video.