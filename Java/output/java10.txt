 Hello friends and welcome back. In this lecture we're going to get more comfortable with the Java packages, classes and methods. Here is our outline. We're going to create a new class and we're going to create a new method and use it in our program. So let's go to our IDE. This is the same project as before and I remove the comment, okay? So let's start by creating a new class in our package. So over here, right click on the package and go to new Java class. This over here will appear. Now all you have to do is to type the name of the new class that you want to create. So for example, I'm going to put my name. You can put your name, all right? And over here we can see that we can create a class and it is already selected. So press enter and have a look. Now we have a new file over here. It is a class because we can see this letter C over here and it is automatically opened over here. As you can see, this is a doted Java file and this class belongs to this package. Perfect. Now this class as you can see does not have a main method. And this is why we don't see a green arrow over here like the main class. So let's create a main method for this class. Let me show you this. Type P SVM, public static void main, all right? And now press enter and the main method will be automatically generated. And now have a look. Now we have a green arrow at this class. So now this class has a main method that can be executed. So we can have multiple main methods in different classes, all right? So now in this main method, we can write some code just like this main method over here. So for example, let's print something. We're going to use the print LM method. So we have a shortcut as out. So as you can see, this prints a string to system out. So if you press enter or tab, this code will be automatically generated. So we are calling the print LM method. So let's say hi from my name. Okay. So the name of the class. So now have a look over here. If you press the run button, the main class will be executed. And if you press here, we cannot see this class. So in order to see it, all you have to do is to right click and run the class over here. Or we can run it by pressing over here and choosing run my name dot main, all right? So I'm going to press on this. And now as you can see, my name is put over here. So now whenever I press on this run button, this class will be executed. And have a look at the output. We can see this message printed. So this statement was executed because this main method was called. Okay. So now let's see create another method in this class. I'm going to create a method that is very similar to the main method. So it will be a public method, also static, and it will have the same return type, which is void. Now we should give a name to this method. Of course, we cannot name it main because we should only have one main method per class. So for example, let's call it say hi. And not that I'm using the camel case naming convention. And as you can see, I'm choosing a descriptive naming for my methods. So now from the name of the method, you can predict that this method will say hi to the user of my program. Right? So now I'm going to open some parentheses. And I don't want to give this method parameters. So I will leave them empty. And after that, I will open braces. Now press enter to get to a new line. And over here, we will write the code for this method. And by the way, if we write this method below the main function or above the main function, it will not make a difference. What's important is that we write the method inside our class. Okay. So now I will put the cursor on this line. And I will press control X. So I will cut the code. And over here, I will press control V in order to paste it. Right? So in the body of this method, we have this statement. So let's try to run this program. And we are running this class. Okay. So press here. And now have a look. We can see nothing. And this is because our main method is empty. As you know, the main method is the starting point of execution of our program. So whenever Java executes the main method, it will find that the main method is empty. So it will do nothing. And our program will end. All right. So in order to execute this method, we should call it just like we call the print and method. Okay. So we're going to call it inside the main method. So as you know, to call a function, we put the function name and then the parameters. And this function takes no parameters. Right. And of course, we will end the statement with a semicolon. So I'm calling this method that is inside this class. Now you might ask, why do we write system.out and over here we didn't write anything. Well, as you can see, say how method is found inside this class. So Java knows that this method over here is actually this one. Okay. But if we do not use system.out, look what will happen. We will get an error. And this error says cannot resolve method print Alan. And this is because Java cannot locate the print Alan method. So we should tell it to find the print Alan method inside the out object of the system class. All right. So now when we run our program, the body of the main method will be executed. So we will call the say high method. So the body of the say high method will be executed. So this code over here will be executed. So we will execute this statement and we will see this string printed. All right. Let's try it. Run the program. And here we go. We can see the statement printed. Perfect. Now above the say high, I'm going to use the print Alan method and let's print something. For example, before say high. All right. Now let's run the program again. So look what happens. Java will execute the body of the main method. So it executes this statement. And after that, it will call the say high method. So this is why we see this string printed. And after that, we see this string printed. All right. Now I'm going to put the cursor on this line. And I will hold shift and alt and I will press the down arrow. So I move this statement below the call to the say high method. So now let's run the program again and see what will happen. As you can see, now we have this string printed before this string. And this is because we are calling the say high method before we are calling the print Alan method. All right. So the order of the statements is important. They are executed after each other from the top to the bottom. So now let's go back to our main class. In here, I will remove this statement. And in this main method, I want to call the say high method of this class. Okay. So in here, just like we use the system class, I'm going to use this class. So I'm going to type the name of the class. And then I will use the dot operator. So have a look. This class contains two methods. The main method and the say high method. And as I said, I want to call the say high method. So press tab. And as you can see, now we are calling the say high method of this class. Let's run the program. And of course, we see the same output because we are still executing this class. So press on this and it choose the main class. All right. Now run the program again. And now we have this output. So what's happening? We are executing the main method of the main class because we chose the main class over here. So we're going to execute this statement. So we are calling the say high method of this class. So basically, we will execute the body of the say high method, which is this code over here. And this is why we see this string printed. All right. Now let's go back over here. And I'm going to remove the name of the class. All right. So as you can see, now we have an error because Java cannot find a method that is called say high inside this class. So just like we use system.out, we should use the name of the class in order to tell Java where to find this method. All right. So in summary, we can create classes inside packages and inside the classes, we can create methods and we can call them in our program. And don't worry, we're going to talk about methods in much more detail later on. But as I said, I just want you to be more comfortable using methods and the classes. So this is it for this video and I'll see you in the next one. Thanks for watching. .