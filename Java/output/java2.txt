 Hello friends and welcome back. In this lecture we will talk about programs and programming languages. So here is our outline. We will see what our programs and programming languages are. We will talk about the machine language, the assembly language and high level languages. Alright? So first of all let's define a program and it is also called a software. It's basically a set of instructions that tell a computer what to do. So we use programs to interact or to talk with computers. So in order to tell a computer to do something we should use a program. And to write programs we use programming languages. So let's talk about programming languages. Basically there are languages that are used to write programs. As you know computers are machines and they do not understand the human language. So programs are written in a language that a computer can understand, which is a programming language. So to be able to interact with a computer we should write programs using a language that a computer can understand, which is a programming language. Now let's see what do we do by machine language. This is the computer's native language. So it is the main language of the computer. This language uses zeros and ones. So the digit, zero and the digit one. And this is why it is called the binary language. Binary means two things. So as you can see we are using two digits, the zero and the one. So for example, if we want to add two numbers, two and three and get that result we would write something like this. This is an instruction written using the machine language. It is a group of ones and zeros as you can see. And this is only one instruction just to get the sum of two and three and get the answer, which is five. So as you can see this is very hard to use. Moreover, machine language is machine dependent. So it differs among different types of machines. So this code over here might work on a certain machine and it might not work on another machine. So this is what we mean by machine dependent. Now let me tell you this. Every instruction should be written in machine language before it can be executed. So later on we are going to write programs using Java. So the instructions will be written using the Java programming language. So all of those instructions must be translated to machine code before we can execute them. And this applies to all other programming languages. Now let's talk about the assembly language. It was developed to make programming easier. First of all, it is also machine dependent. And in the assembly language keywords were introduced. For example, we have a keyword add and a keyword sub and a lot more. So programming was a little bit easier. For example, if you want to add two and three and get the result, we will write something like this. This is an assembly instruction. We are telling the computer to add the number two and the number three and to store the result, some were called result. So this is an instruction written in the assembly programming language. So this cannot be executed because as we said, all instructions should be written in machine code before we execute them. So there is a program called assembler that translates assembly code to machine code. So let's talk about the assembler. Suppose that we have this assembly code over here. As we said, it cannot be executed. So this code is given to the assembler and the assembler translates this code to machine code. And now this code over here can be executed. And this is how we can execute assembly code. So whenever we write a program using assembly, we will translate it to machine code using the assembler and then we will execute it. So now let's talk about high level languages. So high level languages are a new generation of programming languages. In a high level programming language, we use English words. So this is why a high level programming language is easy to learn and easy to use. Also, high level languages are machine independent. So our program will run on different machines and this is very important. And each instruction written in a high level programming language is called a statement. So later on, whenever we write an instruction using Java, for example, we will call it a statement. And a program written using a high level programming language is called a source program or source code. And now let's see this example. If we want to add 2 and 3 and get the result, we will do something like this in Java. This is an instruction written using a high level programming language. So this is a statement. And this is very similar to mathematics, right? We are saying that we want to store inside the result the answer of 2 plus 3. So 2 plus 3 will be calculated, so we get 5 and 5 will be stored in the variable result. In mathematics, we have the concept of a variable, right? And also in programming, we have variable. If you don't know what is a variable, no problem, I'm going to explain it from scratch. But for now, look at this expression and see how much it is easier than assembly and machine code. And look at this semicolon over here. Basically every instruction or every statement should end with a semicolon. And you will see this later on. Now just like before, this is a statement written using a high level programming language, so it cannot be executed. We should translate it to machine code and then we can execute it. So we can use what's called a compiler or an interpreter in order to translate a source code to machine code. And remember, source code is a program written using a high level programming language. So for example, this statement over here is a source code because it is written in a high level language. So let's see how we can translate this statement to machine code using a compiler. So basically a compiler translates all the source code into machine code. So we have a source program or a source code and we will use a compiler to get an executable. An executable is a file that can be executed by our computer. So let's have a look. We have the source code over here and we use the compiler to generate the machine code. And whenever we generate the machine code, we can execute it using an executor to see the output or the result. So the compiler converts all the source code or all the program to machine code and then we can execute it to see the output. Now let's have a look at the interpreter. It works a little bit different. An interpreter translates each statement into machine code and executes it right away. So it will not translate all the program. It translates each statement at a time. So we have something like this. We have a statement from a program. The interpreter will translate it to machine code and then it will execute it. So we will see the output and this over here will be done on all the statements in our program statement by statement. But the compiler translates all the program into machine code. Okay, so this is the difference between an interpreter and a compiler. So this is it for this video. Thanks for watching and I'll see you in the next one.